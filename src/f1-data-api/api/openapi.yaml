openapi: 3.0.3
info:
  title: Race & Lap API
  version: 1.0.0
servers:
- url: /
paths:
  /races:
    get:
      tags:
        - Races
      operationId: racesGET
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_races_get_200_response'
          description: List of races
      summary: Get all races
      x-eov-operation-handler: controllers/DefaultController
  /race:
    post:
      tags:
        - Races
      operationId: racePOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Race'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedResponse'
          description: Race created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
      summary: Create a race
      x-eov-operation-handler: controllers/DefaultController
  /race/{id_race}:
    delete:
      tags:
        - Races
      operationId: raceIdRaceDELETE
      parameters:
      - explode: false
        in: path
        name: id_race
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: Race deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Delete a race
      x-eov-operation-handler: controllers/DefaultController
    get:
      tags:
        - Races
      operationId: raceIdRaceGET
      parameters:
      - explode: false
        in: path
        name: id_race
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Race'
          description: Race data
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get a race by ID
      x-eov-operation-handler: controllers/DefaultController
    put:
      tags:
        - Races
      operationId: raceIdRacePUT
      parameters:
      - explode: false
        in: path
        name: id_race
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Race'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: Race updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update a race
      x-eov-operation-handler: controllers/DefaultController
  /drivers:
    get:
      tags:
        - Drivers
      operationId: driversGET
      parameters:
      - name: offset
        in: query
        description: Número de resultados a omitir (para paginación)
        required: false
        schema:
          type: integer
          minimum: 0
      - name: limit
        in: query
        description: Número de resultados a devolver
        required: false
        schema:
          type: integer
          minimum: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_drivers_get_200_response'
          description: List of driver URIs
      summary: Get all drivers (URIs)
      x-eov-operation-handler: controllers/DefaultController
  /drivers/{id_race}:
    get:
      tags:
        - Drivers
      operationId: driversIdRaceGET
      parameters:
      - explode: false
        in: path
        name: id_race
        required: true
        schema:
          type: integer
        style: simple
      - description: Filter by driver code
        explode: true
        in: query
        name: driverCode
        required: false
        schema:
          type: string
        style: form
      - description: Filter by team name
        explode: true
        in: query
        name: team
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_drivers__id_race__get_200_response'
          description: List of drivers
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get all drivers in a race (with optional filters)
      x-eov-operation-handler: controllers/DefaultController
  /driver/{id_driver}:
    delete:
      tags:
        - Drivers
      operationId: driverIdDriverDELETE
      parameters:
      - explode: false
        in: path
        name: id_driver
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: Driver deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Delete a driver
      x-eov-operation-handler: controllers/DefaultController
    get:
      tags:
        - Drivers
      operationId: driverIdDriverGET
      parameters:
      - explode: false
        in: path
        name: id_driver
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/DriverXML'
          description: Driver found
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get driver by ID
      x-eov-operation-handler: controllers/DefaultController
    post:
      tags:
        - Drivers
      operationId: driverIdDriverPOST
      parameters:
      - explode: false
        in: path
        name: id_driver
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Driver'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedResponse'
          description: Driver created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Conflict
      summary: Add a driver
      x-eov-operation-handler: controllers/DefaultController
    put:
      tags:
        - Drivers
      operationId: driverIdDriverPUT
      parameters:
      - explode: false
        in: path
        name: id_driver
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Driver'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: Driver updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update a driver
      x-eov-operation-handler: controllers/DefaultController
  /race/{id_race}/laps:
    get:
      tags:
        - Laps
      operationId: raceIdRaceLapsGET
      parameters:
      - explode: false
        in: path
        name: id_race
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_race__id_race__laps_get_200_response'
          description: List of laps
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get all laps of a race
      x-eov-operation-handler: controllers/DefaultController
  /race/{id_race}/lap/{lap_number}:
    get:
      tags:
        - Laps
      operationId: raceIdRaceLapLapNumberGET
      parameters:
      - explode: false
        in: path
        name: id_race
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: lap_number
        required: true
        schema:
          type: integer
        style: simple
      - description: Filter by driver code
        explode: true
        in: query
        name: driverCode
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_race__id_race__lap__lap_number__get_200_response'
          description: Lap information
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get a lap from a race (with optional filter by driver)
      x-eov-operation-handler: controllers/DefaultController
  /external-races/{season}:
    get:
      summary: Import races from external API for a given season
      operationId: importExternalRaces
      x-eov-operation-handler: controllers/DefaultController
      tags:
        - External
      parameters:
        - name: season
          in: path
          required: true
          schema:
            type: integer
          description: 'Season year to fetch 2018:2024'
      responses:
        '200':
           description: Races successfully imported
           content:
             application/json:
               schema:
                type: object
                properties:
                  message:
                    type: string
                  imported:
                    type: integer
                  sample: 
                    type: object
                    properties:
                      season:
                        type: integer
                      raceName:
                        type: string
                      raceType:
                        type: string
                    example:
                        season: 2023
                        raceName: "Grand Prix de Monaco"
                        raceType: "Main Race"
               example:
                 message: "Races imported successfully"
                 imported: 1
                 sample:
                   season: 2023
                   raceName: "Grand Prix de Monaco"
                   raceType: "Main Race"
        '502': 
          description: Failed to fetch data from external API
  /external-xml:
    get:
      summary: Consume external XML API and returns the parsed result
      operationId: importExternalXML
      x-eov-operation-handler: controllers/DefaultController
      tags:
      - External
      responses:
        '200':
          description: Parsed XML content from external source
          content:
            application/json:
              schema:
                type: object
                example:
                  note:
                    to: "Users"
                    from: "Orianna"
                    heading: "Reminder"
                    body: "This counts as XML!"
        '502':
          description: Failed to fetch or parse XML from external API

components:
  parameters:
    RaceId:
      explode: false
      in: path
      name: id_race
      required: true
      schema:
        type: integer
      style: simple
    DriverId:
      explode: false
      in: path
      name: id_driver
      required: true
      schema:
        type: integer
      style: simple
  responses:
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request
    Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Conflict
  schemas:
    Race:
      example:
        raceType: raceType
        season: 0
        raceName: raceName
      properties:
        season:
          type: integer
        raceName:
          type: string
        raceType:
          type: string
      required:
      - raceName
      - raceType
      - season
      type: object
    DriverXML:
      type: object
      xml:
        name: driver
      properties:
        driverNumber:
          type: integer
        code:
          type: string
        team:
          type: string
      required:
      - code
      - team
    Driver:
      example:
        driverNumber: 0
        code: code
        team: team
      properties:
        driverNumber:
          type: integer
        code:
          type: string
        team:
          type: string
      required:
      - code
      - team
      type: object
    Lap:
      example:
        sector2Time: sector2Time
        finishingPosition: 1
        finalStatus: finalStatus
        isPersonalBest: true
        pitStopDuration: pitStopDuration
        pitInTime: pitInTime
        lapNumber: 0
        compound: compound
        driverCode: driverCode
        lapTime: lapTime
        sector1Time: sector1Time
        gridPosition: 5
        pitOutTime: pitOutTime
        position: 6
        sector3Time: sector3Time
      properties:
        lapNumber:
          type: integer
        driverCode:
          type: string
        position:
          type: integer
        lapTime:
          type: string
        isPersonalBest:
          type: boolean
        sector1Time:
          type: string
        sector2Time:
          type: string
        sector3Time:
          type: string
        compound:
          type: string
        pitInTime:
          type: string
        pitOutTime:
          type: string
        pitStopDuration:
          type: string
        finishingPosition:
          type: integer
        gridPosition:
          type: integer
        finalStatus:
          type: string
      required:
      - driverCode
      - lapNumber
      type: object
    Message:
      example:
        message: message
      properties:
        message:
          type: string
      type: object
    Error:
      example:
        error: error
      properties:
        error:
          type: string
      type: object
    CreatedResponse:
      example:
        id: 0
        message: message
      properties:
        message:
          type: string
        id:
          type: integer
      type: object
    _races_get_200_response:
      example:
        races:
        - raceType: raceType
          season: 0
          raceName: raceName
        - raceType: raceType
          season: 0
          raceName: raceName
      properties:
        races:
          items:
            $ref: '#/components/schemas/Race'
          type: array
      type: object
    _drivers_get_200_response:
      example:
        drivers:
        - drivers
        - drivers
      properties:
        drivers:
          items:
            type: string
          type: array
      type: object
    _drivers__id_race__get_200_response:
      example:
        drivers:
        - driverNumber: 0
          code: code
          team: team
        - driverNumber: 0
          code: code
          team: team
      properties:
        drivers:
          items:
            $ref: '#/components/schemas/Driver'
          type: array
      type: object
    _race__id_race__laps_get_200_response:
      example:
        laps:
        - sector2Time: sector2Time
          finishingPosition: 1
          finalStatus: finalStatus
          isPersonalBest: true
          pitStopDuration: pitStopDuration
          pitInTime: pitInTime
          lapNumber: 0
          compound: compound
          driverCode: driverCode
          lapTime: lapTime
          sector1Time: sector1Time
          gridPosition: 5
          pitOutTime: pitOutTime
          position: 6
          sector3Time: sector3Time
        - sector2Time: sector2Time
          finishingPosition: 1
          finalStatus: finalStatus
          isPersonalBest: true
          pitStopDuration: pitStopDuration
          pitInTime: pitInTime
          lapNumber: 0
          compound: compound
          driverCode: driverCode
          lapTime: lapTime
          sector1Time: sector1Time
          gridPosition: 5
          pitOutTime: pitOutTime
          position: 6
          sector3Time: sector3Time
      properties:
        laps:
          items:
            $ref: '#/components/schemas/Lap'
          type: array
      type: object
    _race__id_race__lap__lap_number__get_200_response:
      example:
        times:
          sector2Time: sector2Time
          finishingPosition: 1
          finalStatus: finalStatus
          isPersonalBest: true
          pitStopDuration: pitStopDuration
          pitInTime: pitInTime
          lapNumber: 0
          compound: compound
          driverCode: driverCode
          lapTime: lapTime
          sector1Time: sector1Time
          gridPosition: 5
          pitOutTime: pitOutTime
          position: 6
          sector3Time: sector3Time
        lap_number: 0
      properties:
        lap_number:
          type: integer
        times:
          $ref: '#/components/schemas/Lap'
      type: object
tags:
  - name: Races
    description: Operations related to race events (create, read, update, delete)
  - name: Drivers
    description: Operations related to drivers (add, fetch, update, delete)
  - name: Laps
    description: Operations related to lap times in races